{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","App.jsx","theme/theme.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","handleSubmit","e","preventDefault","trim","categories","margin","action","onSubmit","type","value","onChange","target","placeholder","onClick","color","backgroundColor","getGifts","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","w","borderWidth","borderRadius","overflow","src","alt","fontSize","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","as","size","h","item","key","GifExpertApp","theme","extendTheme","config","initialColorMode","useSystemColorMode","colors","brand","900","800","700","ReactDOM","render","document","getElementById"],"mappings":"gOAgDeA,EA3CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAMMC,EAAe,SAACC,GACpBA,EAAEC,iBAGwB,KAAtBJ,EAAWK,SACbP,GAAc,SAACQ,GAAD,OAAiBN,GAAjB,mBAAgCM,OAC9CL,EAAc,MAIlB,OACE,cAAC,IAAD,CAAKM,OAAO,WAAZ,SACE,uBAAMC,OAAO,GAAGC,SAAUP,EAA1B,UACE,cAAC,IAAD,CACEQ,KAAK,OACLC,MAAOX,EACPY,SApBkB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,QAoBjBG,YAAY,eAEd,cAAC,IAAD,CACEC,QAASb,EACTK,OAAO,WACPS,MAAM,QACNC,gBAAgB,YAJlB,0B,mEC/BKC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,0FACyEC,UAC7FH,GAFoB,sBAIJI,MAAMF,GAJF,cAIhBG,EAJgB,gBAKCA,EAAIC,OALL,uBAKdC,EALc,EAKdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAKA,EAAIG,OAAOC,iBAAiBZ,QAVf,kBAafM,GAbe,4CAAH,sD,iBCuBNO,EAnBK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOF,EAAU,EAAVA,IAC5B,OACE,mCACE,eAAC,IAAD,CACEM,EAAE,MACFC,YAAY,MACZC,aAAa,KACbC,SAAS,SACT/B,OAAO,IALT,UAOE,cAAC,IAAD,CAAOgC,IAAKV,EAAKW,IAAKT,IACtB,cAAC,IAAD,UACE,cAAC,IAAD,CAAMU,SAAS,KAAf,SAAqBV,YCiBhBW,EAzBC,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SACjB,ECN0B,SAACA,GAC3B,MAA0BpB,mBAAS,CACjC2B,KAAM,GACNiB,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OANAC,qBAAU,WACR5B,EAASC,GAAU4B,MAAK,SAACC,GACvBH,EAAS,CAAEnB,KAAMsB,EAAML,SAAS,SAEjC,CAACxB,IAEGyB,EDRmBK,CAAa9B,GAA/BO,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,QAEd,OACE,qCACE,cAAC,IAAD,CAASO,GAAG,KAAKC,KAAK,KAAtB,SACGhC,IAEFwB,GACC,cAAC,IAAD,CAAKR,EAAE,OAAOiB,EAAE,QAAhB,SACE,cAAC,IAAD,CAAQA,EAAE,QAAV,SACE,cAAC,IAAD,CAASpC,MAAM,UAAUmC,KAAK,WAKpC,cAAC,IAAD,CAAQC,EAAE,MAAV,SACG1B,EAAKE,KAAI,SAACyB,GACT,OAAO,wBAAC,EAAD,2BAAiBA,GAAjB,IAAuBC,IAAKD,EAAKvB,e,SEAnCyB,EAnBM,WACnB,MAAoCxD,mBAAS,CAAC,KAA9C,mBAAOO,EAAP,KAAmBR,EAAnB,KAEA,OACE,qCACE,cAAC,IAAD,CAAM2C,SAAS,MAAMzB,MAAM,cAA3B,0BAGA,cAAC,EAAD,CAAalB,cAAeA,IAC5B,uBACA,cAAC,IAAD,CAAaS,OAAO,MAApB,SACGD,EAAWsB,KAAI,SAACyB,GACf,OAAO,cAAC,EAAD,CAASlC,SAAUkC,GAAWA,Y,SCFhCG,EAFDC,YAAY,CAAEC,OAbb,CACbC,iBAAkB,OAClBC,oBAAoB,GAWcC,OARrB,CACbC,MAAO,CACLC,IAAK,UACLC,IAAK,UACLC,IAAK,cCFTC,IAASC,OACP,cAAC,IAAD,CAAgBX,MAAOA,EAAvB,SACE,cAAC,EAAD,MAEFY,SAASC,eAAe,W","file":"static/js/main.cd0653ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Box, Input, Button } from \"@chakra-ui/react\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setinputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setinputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //la funcion que modifica el state puede recibir un callback que contiene el estado actual\n    //en este caso el estado actual es categories\n    if (inputValue.trim() !== \"\") {\n      setCategories((categories) => [inputValue, ...categories]);\n      setinputValue(\"\");\n    }\n  };\n\n  return (\n    <Box margin=\"10px 0px\">\n      <form action=\"\" onSubmit={handleSubmit}>\n        <Input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Buscar GIF\"\n        />\n        <Button\n          onClick={handleSubmit}\n          margin=\"10px 0px\"\n          color=\"white\"\n          backgroundColor=\"brand.700\"\n        >\n          Buscar\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifts = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=6DOVtDs7qtGxJ3Msaxu3axY5KCnp0osB&q=${encodeURI(\n    category\n  )}&limit=10`;\n  const res = await fetch(url);\n  const { data } = await res.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      img: img.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n  //   setimages(gifs);\n};\n","import React from \"react\";\n\nimport { Image, Box, Text, Center } from \"@chakra-ui/react\";\n\nconst GifGridItem = ({ title, img }) => {\n  return (\n    <>\n      <Box\n        w=\"10%\"\n        borderWidth=\"1px\"\n        borderRadius=\"lg\"\n        overflow=\"hidden\"\n        margin=\"2\"\n      >\n        <Image src={img} alt={title} />\n        <Center>\n          <Text fontSize=\"xs\">{title}</Text>\n        </Center>\n      </Box>\n    </>\n  );\n};\n\nexport default GifGridItem;\n","import React from \"react\";\n\nimport { Heading, HStack, Spinner, Box, Center } from \"@chakra-ui/react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nimport GifGridItem from \"./GifGridItem\";\n// import { getGifts } from \"../helpers/getGifs\";\n\nconst GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <Heading as=\"h3\" size=\"md\">\n        {category}\n      </Heading>\n      {loading && (\n        <Box w=\"100%\" h=\"100px\">\n          <Center h=\"100px\">\n            <Spinner color=\"red.500\" size=\"xl\" />\n          </Center>\n        </Box>\n      )}\n\n      <HStack h=\"25%\">\n        {data.map((item) => {\n          return <GifGridItem {...item} key={item.id} />;\n        })}\n      </HStack>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifts } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  //ejecuta codigo de manera condicional cuando lo que esta dentro del\n  //arreglo del segundo parametro cambia\n  useEffect(() => {\n    getGifts(category).then((imgs) => {\n      setstate({ data: imgs, loading: false });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\n\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nimport { OrderedList, Text } from \"@chakra-ui/react\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"\"]);\n\n  return (\n    <>\n      <Text fontSize=\"3xl\" color=\"deepskyblue\">\n        GifExpertApp\n      </Text>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <OrderedList margin=\"9px\">\n        {categories.map((item) => {\n          return <GifGrid category={item} key={item} />;\n        })}\n      </OrderedList>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst config = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: true,\n};\n\nconst colors = {\n  brand: {\n    900: \"#1a365d\",\n    800: \"#153e75\",\n    700: \"#2a69ac\",\n  },\n};\n\nconst theme = extendTheme({ config, colors });\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport GifExpertApp from \"./App.jsx\";\n\nimport theme from \"./theme/theme.js\";\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <GifExpertApp />\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}